Folder structure of fluid

app/
    cli/
        fluid/ *
    lib/
        fluid/ *
    modules/
        base/
            config/
            controller/
            data/
            model/
            routes/
            view/
    var/
        log/
        tmp/
public/
    css/
    images/
    js/
    index.php *

Legend:

app/                Contains all the application logic, with both application-wide available aspects and the base module.
app/cli/            Command line tools.
app/cli/fluid/       Default command line tools, such as 'fluid init {project-name}'
app/lib/            Libraries, usually from other vendors, to add functionality without messing with the application
app/lib/fluid        Default functionality offered by fluid, should not be touched by the developer.
app/modules/        Contains the 'base' module and possibly others. Base provides all the basic data, additional modules
                    only need to override where necessary.
app/var/            Stores 'variable' files, such as logs, cache, whatever
app/var/log         Stores log files
app/var/tmp         Used for temporary files
public/             All files intended for public viewing
public/js/          Javascript files
public/images/      Image files
public/css/         CSS files

app/modules/ contains a base directory with the suggested layout for modules, and in case of a small application,
the entirety of it can be built into and on top of the base module. In case of a larger application with multiple parts
(for example, anything that requires a backend), will be better off having at least one additional submodule.

Modules should not share aspects except for with base. Base should be what other modules rely on.

If, for example, there is a frontend and a backend submodule, models that are to be used by both should be placed into
app/modules/base/model, rather than in their specific submodule. If you have, for example, a model that should only
ever be available to the backend, you should put it in app/modules/backend/model. In most cases, the submodules are only
used to separate the different facets of an application for readability and maintainability.

It is entirely possible that the frontend and backend submodules only implement config, controller, routes and view.

The way fluid looks for relevant aspects is in the current module first, then in base. If it then doesn't exist, it will
throw an error.

All folders designated with an asterisk (*) are where fluid code actually lives, and only these folders need to be
upgraded to upgrade the framework to its most recent version. These are:
    app/cli/fluid
    app/lib/fluid
    public/index.php

Flow:
public/index.php is called by the user client, loads app/lib/fluid/bootstrap.php (which loads relevant files, the
autoloader and the base config), then calls app::run() and app::getRouter()->route($route);